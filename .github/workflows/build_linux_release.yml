# This is a basic workflow to help you get started with Actions

name: Build Linux Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build_Release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Use a container with GLIBC 2.17
    container: quay.io/pypa/manylinux2014_x86_64
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set env on push
        if: github.event_name == 'push'
        run: |
          echo "INPUT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "INPUT_TAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV

      - name: init rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh /dev/stdin -y
      - name: install depends
        run: |
          source "$HOME/.cargo/env"
          yum install -y gcc gcc-c++ make automake cmake
          rustup toolchain install nightly
          rustup target add wasm32-unknown-unknown --toolchain nightly
          yum install -y llvm-toolset-7
      # 注意这里开启了一个新的shell，所以要在bash中执行cargo build
      - name: build
        run: |
          source "$HOME/.cargo/env"
          scl enable llvm-toolset-7 "cargo build -r"
      - name: Prepare archive
        run: |
          strip target/release/wedidchain-node
          export ARCHIVE_NAME=wedidchain-node-linux-x64.tar.gz
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          tar -czvf $ARCHIVE_NAME -C target/release 

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.INPUT_TAG }}
          release_name: ${{ env.INPUT_TAG }}
          body: HQ ${{ env.INPUT_TAG }}
          commitish: ${{ env.INPUT_SHA }}
          draft: false
          prerelease: false

      - name: Upload scheduler binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/tar+gzip